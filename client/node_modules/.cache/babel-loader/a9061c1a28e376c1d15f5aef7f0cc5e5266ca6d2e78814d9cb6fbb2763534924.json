{"ast":null,"code":"export const fetchApi = async apiUrl => {\n  try {\n    const response = await fetch(apiUrl, {\n      method: 'GET',\n      mode: 'cors'\n    });\n    if (!response.ok) {\n      throw new Error('Network response was not ok');\n    }\n    const contentType = response.headers.get('Content-Type');\n    if (contentType && contentType.includes('application/json')) {\n      // Parse JSON if it's present\n      const data = await response.json();\n      if (data && data.data && Array.isArray(data.data)) {\n        var _data$data;\n        if (((_data$data = data.data) === null || _data$data === void 0 ? void 0 : _data$data.length) === 0) {\n          return null;\n        } else {\n          return data;\n        }\n      } else {\n        console.log(\"Invalid JSON format. 'data' should be an array.\");\n      }\n    } else {\n      throw new Error('Response is not in JSON format');\n    }\n  } catch (error) {\n    console.error('Error fetching data:', error);\n  }\n};\nexport const filterParams = query => {\n  const timeframe = query.get('timeframe');\n  const queryParams = {\n    timeframe\n  };\n  return queryParams;\n};","map":{"version":3,"names":["fetchApi","apiUrl","response","fetch","method","mode","ok","Error","contentType","headers","get","includes","data","json","Array","isArray","_data$data","length","console","log","error","filterParams","query","timeframe","queryParams"],"sources":["/home/cccc2184/Documents/Finance_node/client/src/utils.js"],"sourcesContent":["export const fetchApi  =  async (apiUrl) => {\n    try {\n      const response = await fetch(apiUrl, {\n\t\t\t  method : 'GET',\n\t\t\t  mode: 'cors',\n\t\t  });\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      const contentType = response.headers.get('Content-Type');   \n      if (contentType && contentType.includes('application/json')) {\n\t\t    // Parse JSON if it's present\n        const data = await response.json();\n        if (data && data.data && Array.isArray(data.data)) {\n          if (data.data?.length === 0) {\n            return null\n          } else {\n            return data;\n        }\n    } else {\n        console.log(\"Invalid JSON format. 'data' should be an array.\");\n    }\n      } else {\n\t\t\t        throw new Error('Response is not in JSON format');\n\t\t  }\n\t\t} catch (error) {\n        console.error('Error fetching data:', error);\n    }\n}\n\nexport const filterParams = (query) => {\n    const timeframe = query.get('timeframe')  \n    \n    const queryParams = {\n        timeframe\n    };\n\n    return queryParams;\n}\n\n\n"],"mappings":"AAAA,OAAO,MAAMA,QAAQ,GAAK,MAAOC,MAAM,IAAK;EACxC,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACF,MAAM,EAAE;MACtCG,MAAM,EAAG,KAAK;MACdC,IAAI,EAAE;IACP,CAAC,CAAC;IACA,IAAI,CAACH,QAAQ,CAACI,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;IAChD;IACA,MAAMC,WAAW,GAAGN,QAAQ,CAACO,OAAO,CAACC,GAAG,CAAC,cAAc,CAAC;IACxD,IAAIF,WAAW,IAAIA,WAAW,CAACG,QAAQ,CAAC,kBAAkB,CAAC,EAAE;MAC7D;MACE,MAAMC,IAAI,GAAG,MAAMV,QAAQ,CAACW,IAAI,CAAC,CAAC;MAClC,IAAID,IAAI,IAAIA,IAAI,CAACA,IAAI,IAAIE,KAAK,CAACC,OAAO,CAACH,IAAI,CAACA,IAAI,CAAC,EAAE;QAAA,IAAAI,UAAA;QACjD,IAAI,EAAAA,UAAA,GAAAJ,IAAI,CAACA,IAAI,cAAAI,UAAA,uBAATA,UAAA,CAAWC,MAAM,MAAK,CAAC,EAAE;UAC3B,OAAO,IAAI;QACb,CAAC,MAAM;UACL,OAAOL,IAAI;QACf;MACJ,CAAC,MAAM;QACHM,OAAO,CAACC,GAAG,CAAC,iDAAiD,CAAC;MAClE;IACE,CAAC,MAAM;MACF,MAAM,IAAIZ,KAAK,CAAC,gCAAgC,CAAC;IACxD;EACF,CAAC,CAAC,OAAOa,KAAK,EAAE;IACVF,OAAO,CAACE,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;EAChD;AACJ,CAAC;AAED,OAAO,MAAMC,YAAY,GAAIC,KAAK,IAAK;EACnC,MAAMC,SAAS,GAAGD,KAAK,CAACZ,GAAG,CAAC,WAAW,CAAC;EAExC,MAAMc,WAAW,GAAG;IAChBD;EACJ,CAAC;EAED,OAAOC,WAAW;AACtB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}